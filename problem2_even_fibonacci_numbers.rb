# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# Function to find the fibonacci numbers to a maximum number:

def fibonacci_numbers(maximum_number)
  first_term, second_term = 1, 2
  fibonacci_array = [first_term]
  until first_term >= maximum_number || second_term >= maximum_number
    fibonacci_array.push(second_term)
    first_term, second_term = second_term, first_term + second_term
  end
  fibonacci_array
end

# Function that determines the sum of even numbers from the array in Fibonacci numbers:

def sum_of_even_fibonacci_numbers(maximum_number)
  fibonacci_array = fibonacci_numbers(maximum_number)
  fibonacci_array.select { |number| number.even? }.reduce(:+)
end

# To find the sum of even fibonacci numbers whose values do not exceed 4,000,000:

puts sum_of_even_fibonacci_numbers(4000000)